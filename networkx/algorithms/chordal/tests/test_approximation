#!/usr/bin/env python
from nose.tools import *
import networkx as nx
import random

class TestApproximation:

    def setUp(self):
        # simple graph
        connected_chordal_G=nx.Graph()
        connected_chordal_G.add_edges_from([(1,2),(1,3),(2,3),(2,4),(3,4),
                                            (3,5),(3,6),(4,5),(4,6),(5,6)])
        self.connected_chordal_G=connected_chordal_G

        chordal_G = nx.Graph()
        chordal_G.add_edges_from([(1,2),(1,3),(2,3),(2,4),(3,4),
                                  (3,5),(3,6),(4,5),(4,6),(5,6),(7,8)])
        chordal_G.add_node(9)
        self.chordal_G=chordal_G

        non_chordal_G = nx.Graph()
        non_chordal_G.add_edges_from([(1,2),(1,3),(2,4),(2,5),(3,4),(3,5)])
        self.non_chordal_G = non_chordal_G

    def test_incrementalTreewidthBoundedApproximation(self):
#        G = nx.generators.classic.path_graph(10)
#        H = networkx.algorithms.chordal.incrementalTreewidthBoundedApproximationCC(G,0,nx.singleSourceRetriangulate)
#        #print H.nodes()
#        #print H.edges()
#        assert_equal(nx.computeTreewidth(H),0)
#        H = networkx.algorithms.chordal.approximation.incrementalTreewidthBoundedApproximationCC(G,1,nx.singleSourceRetriangulate)
#        #print H.nodes()
#        #print H.edges()
#        assert_equal(nx.computeTreewidth(H),1)
#        H = networkx.algorithms.chordal.approximation.incrementalTreewidthBoundedApproximationCC(G,2,nx.singleSourceRetriangulate)
#        #print H.nodes()
#        #print H.edges()
#        assert_equal(nx.computeTreewidth(H),1)
        H = nx.incremental_treewidthbounded_approximation(self.chordal_G,1,nx.single_source_retriangulate)
        #print H.nodes()
        #print H.edges()
        assert_equal(nx.chordal_graph_treewidth(H),1)
        H = nx.incremental_treewidthbounded_approximation(self.chordal_G,2,nx.single_source_retriangulate)
        #print H.nodes()
        #print H.edges()
        assert_equal(nx.chordal_graph_treewidth(H),2)
        H = nx.incremental_treewidthbounded_approximation(self.chordal_G,3,nx.single_source_retriangulate)
        #print self.chordalG.nodes()
        #print self.chordalG.edges()
        #print H.nodes()
        #print H.edges()
        assert_equal(nx.chordal_graph_treewidth(H),3)
        #print H.nodes()
        #print H.edges()
        #assert_true(compare(H,self.chordalG))
#        
#    def test_retriangulation(self):
#        N = 20
#        for i in range(100):
#            G = nx.generators.random_graphs.gnp_random_graph(N,0.1)
#            nx.mcsTriangulate(G)
#            tw = nx.computeTreeWidth(G)
#            if not nx.isChordal(G):
#                raise Exception("It is not chordal")
#            (u,v) = (random.randint(0,N-1),random.randint(0,N-1))
#            while G.has_edge(u,v) or u==v:
#                (u,v) = (random.randint(0,N-1),random.randint(0,N-1))
#            print "Adding ",u,v,"before retriangulation"
#            H = nx.singleSourceRetriangulate(G,u,v)
#            if not nx.isChordal(H):
#                raise Exception("It is not chordal 2")
#            tw2 = nx.computeTreeWidth(H)
#            print tw2,tw
#            if tw2 > tw+1:
#                raise Exception("Treewidth increased by more than one")
#        #assert_true(False)
#            
